{"ast":null,"code":"var _jsxFileName = \"/Users/rishikeshvijaykumarsawant/Deployed Projects/Wathare proj 2/frontend/src/components/GraphDisplay.js\",\n  _s = $RefreshSig$();\n// frontend/src/components/GraphDisplay.js\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Line } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphDisplay = () => {\n  _s();\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    fetchData();\n  }, []);\n  const fetchData = async () => {\n    try {\n      const response = await axios.get('http://localhost:3000/data'); // Assuming backend is running on port 3000\n      setData(response.data);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n  const formatDataForGraph = data => {\n    const labels = data.map(entry => entry.ts);\n    const colors = data.map(entry => {\n      if (entry.machine_status === 0) return 'yellow';else if (entry.machine_status === 1) return 'green';else return 'red'; // Handle missing data\n    });\n    const dataset = {\n      labels: labels,\n      datasets: [{\n        label: 'Machine Status',\n        data: data.map(entry => entry.machine_status),\n        backgroundColor: colors,\n        borderColor: colors,\n        borderWidth: 1\n      }]\n    };\n    return dataset;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Graph Display\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: formatDataForGraph(data)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(GraphDisplay, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\n_c = GraphDisplay;\nexport default GraphDisplay;\nvar _c;\n$RefreshReg$(_c, \"GraphDisplay\");","map":{"version":3,"names":["React","useState","useEffect","axios","Line","jsxDEV","_jsxDEV","GraphDisplay","_s","data","setData","fetchData","response","get","error","console","formatDataForGraph","labels","map","entry","ts","colors","machine_status","dataset","datasets","label","backgroundColor","borderColor","borderWidth","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/rishikeshvijaykumarsawant/Deployed Projects/Wathare proj 2/frontend/src/components/GraphDisplay.js"],"sourcesContent":["// frontend/src/components/GraphDisplay.js\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Line } from 'react-chartjs-2';\n\nconst GraphDisplay = () => {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    try {\n      const response = await axios.get('http://localhost:3000/data'); // Assuming backend is running on port 3000\n      setData(response.data);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n\n  const formatDataForGraph = (data) => {\n    const labels = data.map(entry => entry.ts);\n    const colors = data.map(entry => {\n      if (entry.machine_status === 0) return 'yellow';\n      else if (entry.machine_status === 1) return 'green';\n      else return 'red'; // Handle missing data\n    });\n    const dataset = {\n      labels: labels,\n      datasets: [{\n        label: 'Machine Status',\n        data: data.map(entry => entry.machine_status),\n        backgroundColor: colors,\n        borderColor: colors,\n        borderWidth: 1\n      }]\n    };\n    return dataset;\n  };\n\n  return (\n    <div>\n      <h1>Graph Display</h1>\n      <Line data={formatDataForGraph(data)} />\n    </div>\n  );\n};\n\nexport default GraphDisplay;\n"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,IAAI,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAEpCC,SAAS,CAAC,MAAM;IACdS,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC5B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACU,GAAG,CAAC,4BAA4B,CAAC,CAAC,CAAC;MAChEH,OAAO,CAACE,QAAQ,CAACH,IAAI,CAAC;IACxB,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C;EACF,CAAC;EAED,MAAME,kBAAkB,GAAIP,IAAI,IAAK;IACnC,MAAMQ,MAAM,GAAGR,IAAI,CAACS,GAAG,CAACC,KAAK,IAAIA,KAAK,CAACC,EAAE,CAAC;IAC1C,MAAMC,MAAM,GAAGZ,IAAI,CAACS,GAAG,CAACC,KAAK,IAAI;MAC/B,IAAIA,KAAK,CAACG,cAAc,KAAK,CAAC,EAAE,OAAO,QAAQ,CAAC,KAC3C,IAAIH,KAAK,CAACG,cAAc,KAAK,CAAC,EAAE,OAAO,OAAO,CAAC,KAC/C,OAAO,KAAK,CAAC,CAAC;IACrB,CAAC,CAAC;IACF,MAAMC,OAAO,GAAG;MACdN,MAAM,EAAEA,MAAM;MACdO,QAAQ,EAAE,CAAC;QACTC,KAAK,EAAE,gBAAgB;QACvBhB,IAAI,EAAEA,IAAI,CAACS,GAAG,CAACC,KAAK,IAAIA,KAAK,CAACG,cAAc,CAAC;QAC7CI,eAAe,EAAEL,MAAM;QACvBM,WAAW,EAAEN,MAAM;QACnBO,WAAW,EAAE;MACf,CAAC;IACH,CAAC;IACD,OAAOL,OAAO;EAChB,CAAC;EAED,oBACEjB,OAAA;IAAAuB,QAAA,gBACEvB,OAAA;MAAAuB,QAAA,EAAI;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACtB3B,OAAA,CAACF,IAAI;MAACK,IAAI,EAAEO,kBAAkB,CAACP,IAAI;IAAE;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrC,CAAC;AAEV,CAAC;AAACzB,EAAA,CA1CID,YAAY;AAAA2B,EAAA,GAAZ3B,YAAY;AA4ClB,eAAeA,YAAY;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}