{"ast":null,"code":"var _jsxFileName = \"/Users/rishikeshvijaykumarsawant/Deployed Projects/Wathare proj 2/frontend/src/App.js\",\n  _s = $RefreshSig$();\n// frontend/src/App.js\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Line } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [data, setData] = useState([]);\n  const [summary, setSummary] = useState(null);\n  useEffect(() => {\n    fetchData();\n  }, []);\n  const fetchData = async () => {\n    try {\n      const response = await axios.get('http://localhost:3000/data'); // Assuming backend is running on port 3000\n      setData(response.data);\n      generateSummary(response.data);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n  const generateSummary = data => {\n    const ones = data.filter(entry => entry.machine_status === 1);\n    const zeros = data.filter(entry => entry.machine_status === 0);\n    const missing = data.filter(entry => entry.machine_status === null || entry.machine_status === undefined);\n    const continuousVariations = countContinuousVariations(data);\n    const summaryData = {\n      numberOfOnes: ones.length,\n      numberOfZeros: zeros.length,\n      continuousVariations: continuousVariations\n    };\n    setSummary(summaryData);\n  };\n  const countContinuousVariations = data => {\n    let continuousOnes = 0;\n    let continuousZeros = 0;\n    for (let i = 0; i < data.length; i++) {\n      if (data[i].machine_status === 1) {\n        continuousOnes++;\n        continuousZeros = 0;\n      } else if (data[i].machine_status === 0) {\n        continuousZeros++;\n        continuousOnes = 0;\n      }\n    }\n    return {\n      continuousOnes,\n      continuousZeros\n    };\n  };\n  const plotGraph = () => {\n    const timestamps = data.map(entry => entry.ts);\n    const machineStatus = data.map(entry => entry.machine_status);\n    const colors = data.map(entry => {\n      if (entry.machine_status === 0) return 'yellow';\n      if (entry.machine_status === 1) return 'green';\n      return 'red';\n    });\n    return {\n      labels: timestamps,\n      datasets: [{\n        label: 'Machine Status',\n        data: machineStatus,\n        backgroundColor: colors,\n        yAxisID: 'machineStatus',\n        type: 'line'\n      }]\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Line, {\n      data: plotGraph(),\n      options: {\n        scales: {\n          x: {\n            type: 'time',\n            time: {\n              unit: 'second'\n            }\n          },\n          machineStatus: {\n            type: 'category',\n            labels: ['0', '1']\n          }\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"eyHPvhcC2JtAiV+oypF+paaHJ8M=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","Line","jsxDEV","_jsxDEV","App","_s","data","setData","summary","setSummary","fetchData","response","get","generateSummary","error","console","ones","filter","entry","machine_status","zeros","missing","undefined","continuousVariations","countContinuousVariations","summaryData","numberOfOnes","length","numberOfZeros","continuousOnes","continuousZeros","i","plotGraph","timestamps","map","ts","machineStatus","colors","labels","datasets","label","backgroundColor","yAxisID","type","children","options","scales","x","time","unit","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/rishikeshvijaykumarsawant/Deployed Projects/Wathare proj 2/frontend/src/App.js"],"sourcesContent":["// frontend/src/App.js\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Line } from 'react-chartjs-2';\n\nfunction App() {\n  const [data, setData] = useState([]);\n  const [summary, setSummary] = useState(null);\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    try {\n      const response = await axios.get('http://localhost:3000/data'); // Assuming backend is running on port 3000\n      setData(response.data);\n      generateSummary(response.data);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n\n  const generateSummary = (data) => {\n    const ones = data.filter(entry => entry.machine_status === 1);\n    const zeros = data.filter(entry => entry.machine_status === 0);\n    const missing = data.filter(entry => entry.machine_status === null || entry.machine_status === undefined);\n\n    const continuousVariations = countContinuousVariations(data);\n    \n    const summaryData = {\n      numberOfOnes: ones.length,\n      numberOfZeros: zeros.length,\n      continuousVariations: continuousVariations\n    };\n\n    setSummary(summaryData);\n  };\n\n  const countContinuousVariations = (data) => {\n    let continuousOnes = 0;\n    let continuousZeros = 0;\n\n    for (let i = 0; i < data.length; i++) {\n      if (data[i].machine_status === 1) {\n        continuousOnes++;\n        continuousZeros = 0;\n      } else if (data[i].machine_status === 0) {\n        continuousZeros++;\n        continuousOnes = 0;\n      }\n    }\n\n    return {\n      continuousOnes,\n      continuousZeros\n    };\n  };\n\n  const plotGraph = () => {\n    const timestamps = data.map(entry => entry.ts);\n    const machineStatus = data.map(entry => entry.machine_status);\n    const colors = data.map(entry => {\n      if (entry.machine_status === 0) return 'yellow';\n      if (entry.machine_status === 1) return 'green';\n      return 'red';\n    });\n  \n    return {\n      labels: timestamps,\n      datasets: [\n        {\n          label: 'Machine Status',\n          data: machineStatus,\n          backgroundColor: colors,\n          yAxisID: 'machineStatus',\n          type: 'line'\n        }\n      ]\n    };\n  };\n  \n\n  return (\n    <div>\n    <Line\n      data={plotGraph()}\n      options={{\n        scales: {\n          x: {\n            type: 'time',\n            time: {\n              unit: 'second'\n            }\n          },\n          machineStatus: {\n            type: 'category',\n            labels: ['0', '1']\n          }\n        }\n      }}\n    />\n  </div>\n  \n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}