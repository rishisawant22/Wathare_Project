{"ast":null,"code":"var _jsxFileName = \"/Users/rishikeshvijaykumarsawant/Deployed Projects/Wathare proj 2/frontend/src/components/Generated.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Chart from 'chart.js/auto';\nimport faker from 'faker';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SimulatedDataGenerator = () => {\n  _s();\n  const [hours, setHours] = useState(1);\n  const [data, setData] = useState([]);\n  const generateData = () => {\n    const newData = [];\n    const startDate = new Date();\n    for (let i = 0; i < hours * 3600; i++) {\n      const timestamp = new Date(startDate.getTime() + i * 1000).toISOString();\n      const machineStatus = faker.random.number({\n        min: 0,\n        max: 1\n      });\n      const vibration = faker.random.number({\n        min: 100,\n        max: 1000\n      });\n      newData.push({\n        id: i + 1,\n        ts: timestamp,\n        machine_status: machineStatus,\n        vibration: vibration\n      });\n    }\n    setData(newData);\n    drawChart(newData);\n  };\n  const drawChart = data => {\n    const timestamps = data.map(entry => entry.ts);\n    const vibrations = data.map(entry => entry.vibration);\n    const ctx = document.getElementById('myChart');\n    new Chart(ctx, {\n      type: 'line',\n      data: {\n        labels: timestamps,\n        datasets: [{\n          label: 'Vibration',\n          data: vibrations,\n          borderColor: 'blue',\n          borderWidth: 1,\n          fill: false\n        }]\n      },\n      options: {\n        scales: {\n          x: {\n            type: 'time',\n            time: {\n              unit: 'second'\n            }\n          },\n          y: {\n            beginAtZero: true\n          }\n        }\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      value: hours,\n      onChange: e => setHours(parseInt(e.target.value)),\n      min: \"1\",\n      max: \"24\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: generateData,\n      children: \"Generate Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"myChart\",\n      width: \"400\",\n      height: \"400\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s(SimulatedDataGenerator, \"OX5vtmmxBs2/b0NQvcYneIWRKFU=\");\n_c = SimulatedDataGenerator;\nexport default SimulatedDataGenerator;\nvar _c;\n$RefreshReg$(_c, \"SimulatedDataGenerator\");","map":{"version":3,"names":["React","useState","Chart","faker","jsxDEV","_jsxDEV","SimulatedDataGenerator","_s","hours","setHours","data","setData","generateData","newData","startDate","Date","i","timestamp","getTime","toISOString","machineStatus","random","number","min","max","vibration","push","id","ts","machine_status","drawChart","timestamps","map","entry","vibrations","ctx","document","getElementById","type","labels","datasets","label","borderColor","borderWidth","fill","options","scales","x","time","unit","y","beginAtZero","children","value","onChange","e","parseInt","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","width","height","_c","$RefreshReg$"],"sources":["/Users/rishikeshvijaykumarsawant/Deployed Projects/Wathare proj 2/frontend/src/components/Generated.js"],"sourcesContent":["import React, { useState } from 'react';\nimport Chart from 'chart.js/auto';\nimport faker from 'faker';\n\nconst SimulatedDataGenerator = () => {\n  const [hours, setHours] = useState(1);\n  const [data, setData] = useState([]);\n\n  const generateData = () => {\n    const newData = [];\n    const startDate = new Date();\n    for (let i = 0; i < hours * 3600; i++) {\n      const timestamp = new Date(startDate.getTime() + i * 1000).toISOString();\n      const machineStatus = faker.random.number({ min: 0, max: 1 });\n      const vibration = faker.random.number({ min: 100, max: 1000 });\n      newData.push({\n        id: i + 1,\n        ts: timestamp,\n        machine_status: machineStatus,\n        vibration: vibration,\n      });\n    }\n    setData(newData);\n    drawChart(newData);\n  };\n\n  const drawChart = (data) => {\n    const timestamps = data.map((entry) => entry.ts);\n    const vibrations = data.map((entry) => entry.vibration);\n\n    const ctx = document.getElementById('myChart');\n    new Chart(ctx, {\n      type: 'line',\n      data: {\n        labels: timestamps,\n        datasets: [\n          {\n            label: 'Vibration',\n            data: vibrations,\n            borderColor: 'blue',\n            borderWidth: 1,\n            fill: false,\n          },\n        ],\n      },\n      options: {\n        scales: {\n          x: {\n            type: 'time',\n            time: {\n              unit: 'second',\n            },\n          },\n          y: {\n            beginAtZero: true,\n          },\n        },\n      },\n    });\n  };\n\n  return (\n    <div>\n      <input\n        type=\"number\"\n        value={hours}\n        onChange={(e) => setHours(parseInt(e.target.value))}\n        min=\"1\"\n        max=\"24\"\n      />\n      <button onClick={generateData}>Generate Data</button>\n      <canvas id=\"myChart\" width=\"400\" height=\"400\"></canvas>\n    </div>\n  );\n};\n\nexport default SimulatedDataGenerator;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}