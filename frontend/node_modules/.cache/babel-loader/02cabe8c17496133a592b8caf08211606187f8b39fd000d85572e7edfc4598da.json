{"ast":null,"code":"var _jsxFileName = \"/Users/rishikeshvijaykumarsawant/Deployed Projects/Wathare proj 2/frontend/src/App.js\",\n  _s = $RefreshSig$();\n// frontend/src/App.js\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Line } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    fetchData();\n  }, []);\n  const fetchData = async () => {\n    try {\n      const response = await axios.get('http://localhost:3000/data'); // Assuming backend is running on port 3000\n      setData(response.data);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n  const generateChartData = () => {\n    const timestamps = data.map(entry => entry.ts);\n    const machineStatus = data.map(entry => entry.machine_status);\n    const colors = machineStatus.map(status => status === 0 ? 'yellow' : status === 1 ? 'green' : 'red');\n    const chartData = {\n      labels: timestamps,\n      datasets: [{\n        label: 'Machine Status',\n        data: machineStatus,\n        backgroundColor: colors,\n        fill: false,\n        borderColor: 'rgba(75,192,192,1)',\n        borderWidth: 2,\n        tension: 0.1\n      }]\n    };\n    return chartData;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Gantt/Timeline Graph\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      children: /*#__PURE__*/_jsxDEV(Line, {\n        data: generateChartData()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","Line","jsxDEV","_jsxDEV","App","_s","data","setData","fetchData","response","get","error","console","generateChartData","timestamps","map","entry","ts","machineStatus","machine_status","colors","status","chartData","labels","datasets","label","backgroundColor","fill","borderColor","borderWidth","tension","children","fileName","_jsxFileName","lineNumber","columnNumber","className","_c","$RefreshReg$"],"sources":["/Users/rishikeshvijaykumarsawant/Deployed Projects/Wathare proj 2/frontend/src/App.js"],"sourcesContent":["// frontend/src/App.js\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Line } from 'react-chartjs-2';\n\nconst App = () => {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    try {\n      const response = await axios.get('http://localhost:3000/data'); // Assuming backend is running on port 3000\n      setData(response.data);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n\n  const generateChartData = () => {\n    const timestamps = data.map(entry => entry.ts);\n    const machineStatus = data.map(entry => entry.machine_status);\n    const colors = machineStatus.map(status => status === 0 ? 'yellow' : status === 1 ? 'green' : 'red');\n\n    const chartData = {\n      labels: timestamps,\n      datasets: [\n        {\n          label: 'Machine Status',\n          data: machineStatus,\n          backgroundColor: colors,\n          fill: false,\n          borderColor: 'rgba(75,192,192,1)',\n          borderWidth: 2,\n          tension: 0.1\n        }\n      ]\n    };\n\n    return chartData;\n  };\n\n  return (\n    <div>\n      <h1>Gantt/Timeline Graph</h1>\n      <div className=\"chart-container\">\n        <Line data={generateChartData()} />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,IAAI,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAEpCC,SAAS,CAAC,MAAM;IACdS,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC5B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACU,GAAG,CAAC,4BAA4B,CAAC,CAAC,CAAC;MAChEH,OAAO,CAACE,QAAQ,CAACH,IAAI,CAAC;IACxB,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C;EACF,CAAC;EAED,MAAME,iBAAiB,GAAGA,CAAA,KAAM;IAC9B,MAAMC,UAAU,GAAGR,IAAI,CAACS,GAAG,CAACC,KAAK,IAAIA,KAAK,CAACC,EAAE,CAAC;IAC9C,MAAMC,aAAa,GAAGZ,IAAI,CAACS,GAAG,CAACC,KAAK,IAAIA,KAAK,CAACG,cAAc,CAAC;IAC7D,MAAMC,MAAM,GAAGF,aAAa,CAACH,GAAG,CAACM,MAAM,IAAIA,MAAM,KAAK,CAAC,GAAG,QAAQ,GAAGA,MAAM,KAAK,CAAC,GAAG,OAAO,GAAG,KAAK,CAAC;IAEpG,MAAMC,SAAS,GAAG;MAChBC,MAAM,EAAET,UAAU;MAClBU,QAAQ,EAAE,CACR;QACEC,KAAK,EAAE,gBAAgB;QACvBnB,IAAI,EAAEY,aAAa;QACnBQ,eAAe,EAAEN,MAAM;QACvBO,IAAI,EAAE,KAAK;QACXC,WAAW,EAAE,oBAAoB;QACjCC,WAAW,EAAE,CAAC;QACdC,OAAO,EAAE;MACX,CAAC;IAEL,CAAC;IAED,OAAOR,SAAS;EAClB,CAAC;EAED,oBACEnB,OAAA;IAAA4B,QAAA,gBACE5B,OAAA;MAAA4B,QAAA,EAAI;IAAoB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC7BhC,OAAA;MAAKiC,SAAS,EAAC,iBAAiB;MAAAL,QAAA,eAC9B5B,OAAA,CAACF,IAAI;QAACK,IAAI,EAAEO,iBAAiB,CAAC;MAAE;QAAAmB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAC9B,EAAA,CA/CID,GAAG;AAAAiC,EAAA,GAAHjC,GAAG;AAiDT,eAAeA,GAAG;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}